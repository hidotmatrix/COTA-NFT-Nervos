"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateDefineCotaTx = void 0;
const ckb_sdk_utils_1 = require("@nervosnetwork/ckb-sdk-utils");
const blake2b_1 = require("@nervosnetwork/ckb-sdk-utils/lib/crypto/blake2b");
const constants_1 = require("../../constants");
const utils_1 = require("../../utils");
const generateCotaMetadata = (cotaInfo, cotaId) => {
    const cotaInfoTemp = Object.assign({ cotaId }, cotaInfo);
    const cotaMeta = {
        id: 'CTMeta',
        ver: '1.0',
        metadata: {
            target: 'output#0',
            type: 'cota',
            data: Object.assign({ version: '0' }, cotaInfoTemp),
        },
    };
    return (0, utils_1.append0x)((0, utils_1.utf8ToHex)(JSON.stringify((0, utils_1.toSnakeCase)(cotaMeta))));
};
const generateCotaId = (firstInput, definesIndex) => {
    const input = (0, ckb_sdk_utils_1.hexToBytes)((0, ckb_sdk_utils_1.serializeInput)(firstInput));
    const s = (0, blake2b_1.default)(32, null, null, ckb_sdk_utils_1.PERSONAL);
    s.update(input);
    s.update((0, ckb_sdk_utils_1.hexToBytes)(`0x${(0, utils_1.u8ToHex)(definesIndex)}`));
    return `0x${s.digest('hex').slice(0, 40)}`;
};
const generateDefineCotaTx = (service, cotaLock, total, confiure, cotaInfo, fee = constants_1.FEE, isMainnet = false) => __awaiter(void 0, void 0, void 0, function* () {
    const cotaType = (0, constants_1.getCotaTypeScript)(isMainnet);
    const cotaCells = yield service.collector.getCells(cotaLock, cotaType);
    if (!cotaCells || cotaCells.length === 0) {
        throw new Error("Cota cell doesn't exist");
    }
    const cotaCell = cotaCells[0];
    const inputs = [
        {
            previousOutput: cotaCell.outPoint,
            since: '0x0',
        },
    ];
    const outputs = [cotaCell.output];
    outputs[0].capacity = `0x${(BigInt(outputs[0].capacity) - fee).toString(16)}`;
    const cotaId = generateCotaId(inputs[0], 0);
    const defineReq = {
        lockScript: (0, ckb_sdk_utils_1.serializeScript)(cotaLock),
        cotaId,
        total: (0, utils_1.append0x)((0, utils_1.u32ToBe)(total)),
        issued: '0x00000000',
        configure: (0, utils_1.append0x)(confiure),
    };
    const { smtRootHash, defineSmtEntry } = yield service.aggregator.generateDefineCotaSmt(defineReq);
    const cotaCellData = `0x02${smtRootHash}`;
    const outputsData = [cotaCellData];
    const cellDeps = [(0, constants_1.getCotaCellDep)(isMainnet)];
    const rawTx = {
        version: '0x0',
        cellDeps,
        headerDeps: [],
        inputs,
        outputs,
        outputsData,
        witnesses: [],
    };
    rawTx.witnesses = rawTx.inputs.map((_, i) => i > 0 ? '0x' : { lock: '', inputType: `0x01${defineSmtEntry}`, outputType: generateCotaMetadata(cotaInfo, cotaId) });
    return { rawTx, cotaId };
});
exports.generateDefineCotaTx = generateDefineCotaTx;
