"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateClaimCotaTx = void 0;
const ckb_sdk_utils_1 = require("@nervosnetwork/ckb-sdk-utils");
const constants_1 = require("../../constants");
const generateClaimCotaTx = (service, cotaLock, withdrawalLock, claims, fee = constants_1.FEE, isMainnet = false) => __awaiter(void 0, void 0, void 0, function* () {
    const cotaType = (0, constants_1.getCotaTypeScript)(isMainnet);
    const cotaCells = yield service.collector.getCells(cotaLock, cotaType);
    if (!cotaCells || cotaCells.length === 0) {
        throw new Error("Cota cell doesn't exist");
    }
    const cotaCell = cotaCells[0];
    const inputs = [
        {
            previousOutput: cotaCell.outPoint,
            since: '0x0',
        },
    ];
    const outputs = [cotaCell.output];
    outputs[0].capacity = `0x${(BigInt(outputs[0].capacity) - fee).toString(16)}`;
    const withdrawalLockScript = (0, ckb_sdk_utils_1.serializeScript)(withdrawalLock);
    const claimReq = {
        lockScript: (0, ckb_sdk_utils_1.serializeScript)(cotaLock),
        withdrawalLockScript,
        claims: claims,
    };
    const { smtRootHash, claimSmtEntry, withdrawBlockHash } = yield service.aggregator.generateClaimCotaSmt(claimReq);
    const outputsData = [`0x02${smtRootHash}`];
    const cellDeps = [(0, constants_1.getCotaCellDep)(isMainnet)];
    const headerDeps = [`0x${withdrawBlockHash}`];
    const rawTx = {
        version: '0x0',
        cellDeps,
        headerDeps,
        inputs,
        outputs,
        outputsData,
        witnesses: [],
    };
    rawTx.witnesses = rawTx.inputs.map((_, i) => i > 0 ? '0x' : { lock: '', inputType: `0x04${claimSmtEntry}`, outputType: '' });
    return rawTx;
});
exports.generateClaimCotaTx = generateClaimCotaTx;
