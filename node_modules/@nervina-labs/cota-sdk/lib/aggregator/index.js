"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Aggregator = void 0;
const axios_1 = require("axios");
const case_parser_1 = require("../utils/case-parser");
class Aggregator {
    constructor({ registryUrl, cotaUrl }) {
        this.registryUrl = registryUrl;
        this.cotaUrl = cotaUrl;
    }
    baseRPC(method, req, url = this.cotaUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            let payload = {
                id: payloadId(),
                jsonrpc: '2.0',
                method,
                params: req ? (0, case_parser_1.toSnakeCase)(req) : null,
            };
            const body = JSON.stringify(payload, null, '');
            try {
                let response = (yield (0, axios_1.default)({
                    method: 'post',
                    url,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    timeout: 3000000,
                    data: body,
                })).data;
                if (response.error) {
                    console.error(response);
                }
                else {
                    return (0, case_parser_1.toCamelcase)(response.result);
                }
            }
            catch (error) {
                console.error('error', error);
            }
        });
    }
    generateRegisterCotaSmt(lockHashes) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('register_cota_cells', lockHashes, this.registryUrl));
        });
    }
    generateUpdateCcidsSmt() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('update_registered_ccid', undefined, this.registryUrl));
        });
    }
    checkReisteredLockHashes(lockHashes) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('check_registered_lock_hashes', lockHashes, this.registryUrl));
        });
    }
    generateDefineCotaSmt(define) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('generate_define_cota_smt', define));
        });
    }
    generateMintCotaSmt(mint) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('generate_mint_cota_smt', mint));
        });
    }
    generateWithdrawalCotaSmt(withdrawal) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('generate_withdrawal_cota_smt', withdrawal));
        });
    }
    generateTransferCotaSmt(transfer) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('generate_transfer_cota_smt', transfer));
        });
    }
    generateClaimCotaSmt(claim) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('generate_claim_cota_smt', claim));
        });
    }
    generateTransferUpdateCotaSmt(transfer) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('generate_transfer_update_cota_smt', transfer));
        });
    }
    generateSequentialTransferCotaSmt(transfer) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('generate_sequential_transfer_cota_smt', transfer));
        });
    }
    generateClaimUpdateCotaSmt(claim) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('generate_claim_update_cota_smt', claim));
        });
    }
    generateUpdateCotaSmt(update) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('generate_update_cota_smt', update));
        });
    }
    getHoldCotaNft(req) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('get_hold_cota_nft', convert(req)));
        });
    }
    getWithdrawCotaNft(req) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('get_withdrawal_cota_nft', convert(req)));
        });
    }
    getMintCotaNft(req) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('get_mint_cota_nft', convert(req)));
        });
    }
    isClaimed(req) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('is_claimed', req));
        });
    }
    getCotaNftSender(req) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('get_cota_nft_sender', req));
        });
    }
    getDefineInfo(req) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('get_define_info', req));
        });
    }
    getIssuerInfo(req) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('get_issuer_info', req));
        });
    }
    getCotaCount(req) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('get_cota_count', req));
        });
    }
    generateExtensionSmt(extension) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.baseRPC('generate_extension_smt', extension));
        });
    }
}
exports.Aggregator = Aggregator;
const convert = (req) => (Object.assign(Object.assign({}, req), { page: req.page.toString(), pageSize: req.pageSize.toString() }));
const payloadId = () => Date.now();
