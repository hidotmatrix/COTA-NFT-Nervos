import { ClaimReq, DefineReq, GetCotaReq, IsClaimedReq, MintReq, TransferReq, UpdateReq, WithdrawalReq, GetCotaSenderReq, ClaimUpdateReq, TransferUpdateReq, GetDefineInfoReq, GetIssuerInfoReq, GetCotaCountReq, ExtensionReq, SequentialTransferReq } from '../types/request';
import { ClaimResp, DefineResp, GetHoldResp, GetMintResp, GetWithdrawalResp, IsClaimedResp, MintResp, RegistryResp, TransferResp, UpdateResp, WithdrawalResp, GetCotaSenderResp, ClaimUpdateResp, TransferUpdateResp, CheckRegisteredResp, GetDefineInfoResp, GetIssuerInfoResp, GetCotaCountResp, ExtensionResp, SequentialTransferResp } from '../types/response';
import { Byte32 } from '../types/common';
export declare class Aggregator {
    private registryUrl;
    private cotaUrl;
    constructor({ registryUrl, cotaUrl }: {
        registryUrl: string;
        cotaUrl: string;
    });
    private baseRPC;
    generateRegisterCotaSmt(lockHashes: Byte32[]): Promise<RegistryResp>;
    generateUpdateCcidsSmt(): Promise<RegistryResp>;
    checkReisteredLockHashes(lockHashes: Byte32[]): Promise<CheckRegisteredResp>;
    generateDefineCotaSmt(define: DefineReq): Promise<DefineResp>;
    generateMintCotaSmt(mint: MintReq): Promise<MintResp>;
    generateWithdrawalCotaSmt(withdrawal: WithdrawalReq): Promise<WithdrawalResp>;
    generateTransferCotaSmt(transfer: TransferReq): Promise<TransferResp>;
    generateClaimCotaSmt(claim: ClaimReq): Promise<ClaimResp>;
    generateTransferUpdateCotaSmt(transfer: TransferUpdateReq): Promise<TransferUpdateResp>;
    generateSequentialTransferCotaSmt(transfer: SequentialTransferReq): Promise<SequentialTransferResp>;
    generateClaimUpdateCotaSmt(claim: ClaimUpdateReq): Promise<ClaimUpdateResp>;
    generateUpdateCotaSmt(update: UpdateReq): Promise<UpdateResp>;
    getHoldCotaNft(req: GetCotaReq): Promise<GetHoldResp>;
    getWithdrawCotaNft(req: GetCotaReq): Promise<GetWithdrawalResp>;
    getMintCotaNft(req: GetCotaReq): Promise<GetMintResp>;
    isClaimed(req: IsClaimedReq): Promise<IsClaimedResp>;
    getCotaNftSender(req: GetCotaSenderReq): Promise<GetCotaSenderResp>;
    getDefineInfo(req: GetDefineInfoReq): Promise<GetDefineInfoResp>;
    getIssuerInfo(req: GetIssuerInfoReq): Promise<GetIssuerInfoResp>;
    getCotaCount(req: GetCotaCountReq): Promise<GetCotaCountResp>;
    generateExtensionSmt(extension: ExtensionReq): Promise<ExtensionResp>;
}
