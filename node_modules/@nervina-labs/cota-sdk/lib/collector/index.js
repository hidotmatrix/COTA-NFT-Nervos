"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Collector = void 0;
const axios_1 = require("axios");
const ckb_sdk_core_1 = require("@nervosnetwork/ckb-sdk-core");
const case_parser_1 = require("../utils/case-parser");
const constants_1 = require("../constants");
class Collector {
    constructor({ ckbNodeUrl, ckbIndexerUrl }) {
        this.ckbNodeUrl = ckbNodeUrl;
        this.ckbIndexerUrl = ckbIndexerUrl;
    }
    getCkb() {
        return new ckb_sdk_core_1.default(this.ckbNodeUrl);
    }
    getCells(lock, type) {
        return __awaiter(this, void 0, void 0, function* () {
            const filter = type
                ? {
                    script: {
                        code_hash: type.codeHash,
                        hash_type: type.hashType,
                        args: type.args,
                    },
                }
                : {
                    script: null,
                    output_data_len_range: ['0x0', '0x1'],
                };
            let payload = {
                id: 1,
                jsonrpc: '2.0',
                method: 'get_cells',
                params: [
                    {
                        script: {
                            code_hash: lock.codeHash,
                            hash_type: lock.hashType,
                            args: lock.args,
                        },
                        script_type: 'lock',
                        filter,
                    },
                    'asc',
                    '0x64',
                ],
            };
            const body = JSON.stringify(payload, null, '  ');
            let response = (yield (0, axios_1.default)({
                method: 'post',
                url: this.ckbIndexerUrl,
                headers: {
                    'Content-Type': 'application/json',
                },
                timeout: 3000000,
                data: body,
            })).data;
            if (response.error) {
                console.error(response.error);
                throw Error('Get cells error');
            }
            else {
                return (0, case_parser_1.toCamelcase)(response.result.objects);
            }
        });
    }
    collectInputs(liveCells, needCapacity, fee) {
        return __awaiter(this, void 0, void 0, function* () {
            let inputs = [];
            let sum = BigInt(0);
            for (let cell of liveCells) {
                inputs.push({
                    previousOutput: {
                        txHash: cell.outPoint.txHash,
                        index: cell.outPoint.index,
                    },
                    since: '0x0',
                });
                sum = sum + BigInt(cell.output.capacity);
                if (sum >= needCapacity + constants_1.MIN_CAPACITY + fee) {
                    break;
                }
            }
            if (sum < needCapacity + fee) {
                throw Error('Capacity not enough');
            }
            if (sum < needCapacity + constants_1.MIN_CAPACITY + fee) {
                throw Error('Capacity not enough for change');
            }
            return { inputs, capacity: sum };
        });
    }
    getLiveCell(outPoint) {
        return __awaiter(this, void 0, void 0, function* () {
            const ckb = new ckb_sdk_core_1.default(this.ckbNodeUrl);
            const { cell } = yield ckb.rpc.getLiveCell(outPoint, true);
            return cell;
        });
    }
}
exports.Collector = Collector;
