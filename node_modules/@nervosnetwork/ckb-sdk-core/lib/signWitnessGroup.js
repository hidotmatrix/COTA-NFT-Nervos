"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ckb_sdk_utils_1 = require("@nervosnetwork/ckb-sdk-utils");
const ecpair_1 = (0, tslib_1.__importDefault)(require("@nervosnetwork/ckb-sdk-utils/lib/ecpair"));
const signWitnessGroup = (sk, transactionHash, witnessGroup) => {
    if (!witnessGroup.length) {
        throw new Error('WitnessGroup cannot be empty');
    }
    if (typeof witnessGroup[0] !== 'object') {
        throw new Error('The first witness in the group should be type of WitnessArgs');
    }
    const emptyWitness = Object.assign(Object.assign({}, witnessGroup[0]), { lock: `0x${'0'.repeat(130)}` });
    const serializedEmptyWitnessBytes = (0, ckb_sdk_utils_1.hexToBytes)((0, ckb_sdk_utils_1.serializeWitnessArgs)(emptyWitness));
    const serializedEmptyWitnessSize = serializedEmptyWitnessBytes.length;
    const s = (0, ckb_sdk_utils_1.blake2b)(32, null, null, ckb_sdk_utils_1.PERSONAL);
    s.update((0, ckb_sdk_utils_1.hexToBytes)(transactionHash));
    s.update((0, ckb_sdk_utils_1.hexToBytes)((0, ckb_sdk_utils_1.toUint64Le)(`0x${serializedEmptyWitnessSize.toString(16)}`)));
    s.update(serializedEmptyWitnessBytes);
    witnessGroup.slice(1).forEach(w => {
        const bytes = (0, ckb_sdk_utils_1.hexToBytes)(typeof w === 'string' ? w : (0, ckb_sdk_utils_1.serializeWitnessArgs)(w));
        s.update((0, ckb_sdk_utils_1.hexToBytes)((0, ckb_sdk_utils_1.toUint64Le)(`0x${bytes.length.toString(16)}`)));
        s.update(bytes);
    });
    const message = `0x${s.digest('hex')}`;
    if (typeof sk === 'string') {
        const keyPair = new ecpair_1.default(sk);
        emptyWitness.lock = keyPair.signRecoverable(message);
    }
    else {
        emptyWitness.lock = sk(message);
    }
    return [(0, ckb_sdk_utils_1.serializeWitnessArgs)(emptyWitness), ...witnessGroup.slice(1)];
};
exports.default = signWitnessGroup;
//# sourceMappingURL=signWitnessGroup.js.map