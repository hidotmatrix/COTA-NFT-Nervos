/// <reference types="../types/global" />
/// <reference types="@nervosnetwork/ckb-types" />
import { JSBI } from '@nervosnetwork/ckb-sdk-utils';
export declare const getBigInts: ({ fee, capacityThreshold, changeThreshold }: {
    [key: string]: string | bigint;
}) => {
    targetFee: JSBI;
    minCapacity: JSBI;
    minChange: JSBI;
    zeroBigInt: JSBI;
};
export declare const getKeyAndCellsPairs: (params: Pick<RawTransactionParams.Simple, 'inputScript' | 'outputScript' | 'capacity' | 'cells'> | Pick<RawTransactionParams.Complex, 'inputScripts' | 'outputs' | 'cells'>) => {
    inputScripts: CKBComponents.Script[];
    outputs: RawTransactionParams.Output[];
    unspentCellsMap: Map<string, RawTransactionParams.Cell[]>;
};
export declare const getTargetOutputs: ({ outputs, minCapacity, }: {
    outputs: ReturnType<typeof getKeyAndCellsPairs>['outputs'];
    minCapacity: JSBI;
}) => {
    capacity: JSBI;
    lock: CKBComponents.Script;
    type?: CKBComponents.Script | null | undefined;
}[];
export declare const getInputs: ({ inputScripts, safeMode, costCapacity, unspentCellsMap, }: {
    inputScripts: CKBComponents.Script[];
    unspentCellsMap: ReturnType<typeof getKeyAndCellsPairs>['unspentCellsMap'];
    safeMode: boolean;
    costCapacity: JSBI;
}) => {
    inputs: (CKBComponents.CellInput & {
        lockhash: string;
    })[];
    sum: JSBI;
};
export declare const getLeftCells: ({ usedCells, inputScripts, unspentCellsMap, }: {
    inputScripts: CKBComponents.Script[];
    usedCells: CKBComponents.CellInput[];
    unspentCellsMap: ReturnType<typeof getKeyAndCellsPairs>['unspentCellsMap'];
}) => Array<{
    capacity: string;
    outPoint: CKBComponents.OutPoint;
}>;
declare const generateRawTransaction: ({ fee, changeLockScript, safeMode, deps, capacityThreshold, changeThreshold, ...params }: RawTransactionParams.Simple | RawTransactionParams.Complex) => CKBComponents.RawTransactionToSign;
export default generateRawTransaction;
