/// <reference types="../types/global" />
/// <reference types="@nervosnetwork/ckb-types" />
declare type SignatureProvider = string | ((message: string | Uint8Array) => string);
declare type LockHash = string;
declare type TransactionHash = string;
declare type CachedLock = {
    lock: CKBComponents.Script;
};
export interface SignWitnesses {
    (key: SignatureProvider): (params: {
        transactionHash: TransactionHash;
        witnesses: StructuredWitness[];
    }) => StructuredWitness[];
    (key: Map<LockHash, SignatureProvider>): (params: {
        transactionHash: TransactionHash;
        witnesses: StructuredWitness[];
        inputCells: CachedLock[];
        skipMissingKeys: boolean;
    }) => StructuredWitness[];
    (key: SignatureProvider | Map<LockHash, SignatureProvider>): (params: {
        transactionHash: TransactionHash;
        witnesses: StructuredWitness[];
        inputCells?: CachedLock[];
        skipMissingKeys?: boolean;
    }) => StructuredWitness[];
}
export declare const isMap: <K = any, V = any>(val: any) => val is Map<K, V>;
declare const signWitnesses: SignWitnesses;
export default signWitnesses;
