/// <reference types="../types/global" />
/// <reference types="@nervosnetwork/ckb-types" />
import RPC from '@nervosnetwork/ckb-sdk-rpc';
import * as utils from '@nervosnetwork/ckb-sdk-utils';
declare type Key = string;
declare type Address = string;
declare type LockHash = string;
declare type Capacity = bigint | string;
declare type URL = string;
interface RawTransactionParams extends RawTransactionParams.Base {
    fromAddress: Address;
    toAddress: Address;
    capacity: Capacity;
    cells?: RawTransactionParams.Cell[];
}
interface ComplexRawTransactoinParams extends RawTransactionParams.Base {
    fromAddresses: Address[];
    receivePairs: {
        address: Address;
        capacity: Capacity;
        type?: CKBComponents.Script | null;
    }[];
    cells: Map<LockHash, RawTransactionParams.Cell[]>;
}
declare class CKB {
    #private;
    cells: Map<LockHash, RawTransactionParams.Cell[]>;
    rpc: RPC;
    utils: typeof utils;
    private _node;
    config: {
        secp256k1Dep?: DepCellInfo;
        daoDep?: DepCellInfo;
    };
    constructor(nodeUrl?: URL);
    setNode(node: URL | CKBComponents.Node): CKBComponents.Node;
    get node(): CKBComponents.Node;
    generateLockHash: (args: string, dep?: Omit<CKBComponents.Script, 'args'> | undefined) => string;
    loadDeps: () => Promise<{
        secp256k1Dep?: DepCellInfo | undefined;
        daoDep?: DepCellInfo | undefined;
    }>;
    loadCells: (params: LoadCellsParams.FromIndexer & {
        save?: boolean;
    }) => Promise<RawTransactionParams.Cell[]>;
    signWitnesses: import("./signWitnesses").SignWitnesses;
    signTransaction: (key: Key | Map<LockHash, Key>) => (transaction: CKBComponents.RawTransactionToSign, cells?: Array<{
        outPoint: CKBComponents.OutPoint;
        lock: CKBComponents.Script;
    }>) => {
        witnesses: string[];
        outputsData: string[];
        outputs: CKBComponents.CellOutput[];
        inputs: CKBComponents.CellInput[];
        version: string;
        cellDeps: CKBComponents.CellDep[];
        headerDeps: string[];
    };
    generateRawTransaction: ({ fee, safeMode, deps, capacityThreshold, changeThreshold, witnesses, outputsData, ...params }: RawTransactionParams | ComplexRawTransactoinParams) => CKBComponents.RawTransactionToSign;
    generateDaoDepositTransaction: ({ fromAddress, capacity, fee, cells, }: {
        fromAddress: Address;
        capacity: Capacity;
        fee: Capacity;
        cells?: RawTransactionParams.Cell[] | undefined;
    }) => CKBComponents.RawTransactionToSign;
    generateDaoWithdrawStartTransaction: ({ outPoint, fee, cells, }: {
        outPoint: CKBComponents.OutPoint;
        fee: Capacity;
        cells?: RawTransactionParams.Cell[] | undefined;
    }) => Promise<CKBComponents.RawTransactionToSign>;
    generateDaoWithdrawTransaction: ({ depositOutPoint, withdrawOutPoint, fee, }: {
        depositOutPoint: CKBComponents.OutPoint;
        withdrawOutPoint: CKBComponents.OutPoint;
        fee: Capacity;
    }) => Promise<CKBComponents.RawTransactionToSign>;
    calculateDaoMaximumWithdraw: (depositOutPoint: CKBComponents.OutPoint, withdraw: CKBComponents.Hash | CKBComponents.OutPoint) => Promise<string>;
}
export default CKB;
