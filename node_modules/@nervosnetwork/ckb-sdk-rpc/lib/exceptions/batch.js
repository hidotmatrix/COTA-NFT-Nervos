"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdNotMatchedInBatchException = exports.PayloadInBatchException = exports.MethodInBatchNotFoundException = void 0;
const tslib_1 = require("tslib");
const ErrorCode_1 = (0, tslib_1.__importDefault)(require("./ErrorCode"));
const rpc_1 = require("./rpc");
const ERROR_LABEL = 'Batch Request';
class MethodInBatchNotFoundException extends Error {
    constructor(name) {
        super(`[${ERROR_LABEL}]: Method ${name} is not found`);
        this.code = ErrorCode_1.default.MethodNotFound;
    }
}
exports.MethodInBatchNotFoundException = MethodInBatchNotFoundException;
class PayloadInBatchException extends Error {
    constructor(index, message) {
        super(`[${ERROR_LABEL} ${index}]: ${message}`);
        this.code = ErrorCode_1.default.PayloadMessage;
        this.index = index;
    }
}
exports.PayloadInBatchException = PayloadInBatchException;
class IdNotMatchedInBatchException extends rpc_1.IdNotMatchException {
    constructor(index, requestId, responseId) {
        super(requestId, responseId);
        this.message = `[${ERROR_LABEL} ${index}]: ${this.message}`;
        this.index = index;
    }
}
exports.IdNotMatchedInBatchException = IdNotMatchedInBatchException;
exports.default = {
    MethodInBatchNotFoundException,
    PayloadInBatchException,
    IdNotMatchedInBatchException,
};
//# sourceMappingURL=batch.js.map