"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringHashTypeException = exports.BigintOrHexStringTypeException = exports.OutputsValidatorTypeException = exports.PageSizeTooSmallException = exports.PageSizeTooLargeException = void 0;
const exceptions_1 = require("@nervosnetwork/ckb-sdk-utils/lib/exceptions");
class PageSizeTooLargeException extends RangeError {
    constructor(pageSize, maxSize) {
        super(`Expect page size to be at most ${maxSize}, but ${pageSize} received`);
        this.code = exceptions_1.ErrorCode.ParameterInvalid;
    }
}
exports.PageSizeTooLargeException = PageSizeTooLargeException;
class PageSizeTooSmallException extends RangeError {
    constructor(pageSize, minSize) {
        super(`Expect page size to be at least ${minSize}, but ${pageSize} received`);
        this.code = exceptions_1.ErrorCode.ParameterInvalid;
    }
}
exports.PageSizeTooSmallException = PageSizeTooSmallException;
class OutputsValidatorTypeException extends TypeError {
    constructor() {
        super(`Expect outputs validator to be 'default' or 'passthrough'`);
        this.code = exceptions_1.ErrorCode.ParameterInvalid;
    }
}
exports.OutputsValidatorTypeException = OutputsValidatorTypeException;
class BigintOrHexStringTypeException extends TypeError {
    constructor(value) {
        super(`Expect number to be bigint or hex string, but ${value} received`);
        this.code = exceptions_1.ErrorCode.ParameterInvalid;
    }
}
exports.BigintOrHexStringTypeException = BigintOrHexStringTypeException;
class StringHashTypeException extends TypeError {
    constructor(hash) {
        super(`Expect hash to be string, but ${hash} received`);
        this.code = exceptions_1.ErrorCode.ParameterInvalid;
    }
}
exports.StringHashTypeException = StringHashTypeException;
exports.default = {
    PageSizeTooLargeException,
    PageSizeTooSmallException,
    OutputsValidatorTypeException,
    BigintOrHexStringTypeException,
    StringHashTypeException,
};
//# sourceMappingURL=formatter.js.map