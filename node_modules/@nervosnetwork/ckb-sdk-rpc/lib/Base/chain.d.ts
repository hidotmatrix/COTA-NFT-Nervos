/// <reference types="../types/rpc" />
/// <reference types="@nervosnetwork/ckb-types" />
declare const _default: {
    getTipBlockNumber: {
        method: string;
        paramsFormatters: never[];
        resultFormatters: (number: string) => string;
    };
    getTipHeader: {
        method: string;
        paramsFormatters: never[];
        resultFormatters: (header: RPC.Header) => CKBComponents.BlockHeader;
    };
    getCurrentEpoch: {
        method: string;
        paramsFormatters: never[];
        resultFormatters: (epoch: RPC.Epoch) => CKBComponents.Epoch;
    };
    getEpochByNumber: {
        method: string;
        paramsFormatters: ((number: string | bigint) => string)[];
        resultFormatters: (epoch: RPC.Epoch) => CKBComponents.Epoch;
    };
    getBlockHash: {
        method: string;
        paramsFormatters: ((number: string | bigint) => string)[];
    };
    getBlock: {
        method: string;
        paramsFormatters: ((hash: string) => string)[];
        resultFormatters: (block: RPC.Block) => CKBComponents.Block;
    };
    getBlockByNumber: {
        method: string;
        paramsFormatters: ((number: string | bigint) => string)[];
        resultFormatters: (block: RPC.Block) => CKBComponents.Block;
    };
    getHeader: {
        method: string;
        paramsFormatters: ((hash: string) => string)[];
        resultFormatters: (header: RPC.Header) => CKBComponents.BlockHeader;
    };
    getHeaderByNumber: {
        method: string;
        paramsFormatters: ((number: string | bigint) => string)[];
        resultFormatters: (header: RPC.Header) => CKBComponents.BlockHeader;
    };
    getLiveCell: {
        method: string;
        paramsFormatters: ((outPoint: CKBComponents.OutPoint | null) => RPC.OutPoint | null)[];
        resultFormatters: (cellWithStatus: {
            cell: RPC.LiveCell;
            status: string;
        }) => {
            cell: CKBComponents.LiveCell;
            status: string;
        };
    };
    getTransaction: {
        method: string;
        paramsFormatters: ((hash: string) => string)[];
        resultFormatters: (txWithStatus: RPC.TransactionWithStatus) => {
            transaction: CKBComponents.RawTransaction;
            txStatus: {
                blockHash: string | null;
                status: RPC.TransactionStatus;
            };
        };
    };
    getCellbaseOutputCapacityDetails: {
        method: string;
        paramsFormatters: ((hash: string) => string)[];
        resultFormatters: (details: RPC.CellbaseOutputCapacityDetails) => CKBComponents.CellbaseOutputCapacityDetails;
    };
    getBlockEconomicState: {
        method: string;
        paramsFormatters: ((hash: string) => string)[];
        resultFormatters: (blockEconomicState: RPC.BlockEconomicState) => CKBComponents.BlockEconomicState;
    };
    getTransactionProof: {
        method: string;
        paramsFormatters: ((arg: any) => any)[];
        resultFormatters: (proof: RPC.TransactionProof) => CKBComponents.TransactionProof;
    };
    verifyTransactionProof: {
        method: string;
        paramsFormatters: ((proof: CKBComponents.TransactionProof) => RPC.TransactionProof)[];
    };
    getConsensus: {
        method: string;
        paramsFormatters: never[];
        resultFormatters: (consensus: RPC.Consensus) => CKBComponents.Consensus;
    };
};
export default _default;
