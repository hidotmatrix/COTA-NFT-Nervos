/// <reference types="@nervosnetwork/ckb-types" />
export interface RpcPropertes {
    [name: string]: Omit<CKBComponents.Method, 'name'>;
}
export declare const rpcProperties: RpcPropertes;
export interface Base {
    getTipBlockNumber: () => Promise<CKBComponents.BlockNumber>;
    getTipHeader: () => Promise<CKBComponents.BlockHeader>;
    getCurrentEpoch: () => Promise<CKBComponents.Epoch>;
    getEpochByNumber: (epoch: string | bigint) => Promise<CKBComponents.Epoch>;
    getBlockHash: (number: CKBComponents.BlockNumber | bigint) => Promise<CKBComponents.Hash>;
    getBlock: (hash: CKBComponents.Hash) => Promise<CKBComponents.Block>;
    getHeader: (blockHash: CKBComponents.Hash) => Promise<CKBComponents.BlockHeader>;
    getHeaderByNumber: (blockNumber: CKBComponents.BlockNumber | bigint) => Promise<CKBComponents.BlockHeader>;
    getLiveCell: (outPoint: CKBComponents.OutPoint, withData: boolean) => Promise<{
        cell: CKBComponents.LiveCell;
        status: CKBComponents.CellStatus;
    }>;
    getTransaction: (hash: CKBComponents.Hash) => Promise<CKBComponents.TransactionWithStatus>;
    getCellbaseOutputCapacityDetails: (blockHash: CKBComponents.Hash) => Promise<CKBComponents.CellbaseOutputCapacityDetails>;
    getBlockEconomicState: (blockHash: CKBComponents.Hash) => Promise<CKBComponents.BlockEconomicState>;
    getTransactionProof: (transactionHashes: CKBComponents.Hash[], blockHash?: CKBComponents.Hash) => Promise<CKBComponents.TransactionProof>;
    verifyTransactionProof: (transactionProof: CKBComponents.TransactionProof) => Promise<CKBComponents.Hash[]>;
    getConsensus: () => Promise<CKBComponents.Consensus>;
    getBlockByNumber: (number: CKBComponents.BlockNumber | bigint) => Promise<CKBComponents.Block>;
    dryRunTransaction: (tx: CKBComponents.RawTransaction) => Promise<CKBComponents.RunDryResult>;
    calculateDaoMaximumWithdraw: (outPoint: CKBComponents.OutPoint, withdrawBlockHash: CKBComponents.Hash256) => Promise<string>;
    localNodeInfo: () => Promise<CKBComponents.LocalNodeInfo>;
    getPeers: () => Promise<CKBComponents.RemoteNodeInfo[]>;
    getBannedAddresses: () => Promise<CKBComponents.BannedAddresses>;
    clearBannedAddresses: () => Promise<null>;
    setBan: (address: string, command: 'insert' | 'delete', banTime: string | null, absolute?: boolean, reason?: string) => Promise<null>;
    syncState: () => Promise<CKBComponents.SyncState>;
    setNetworkActive: (state: boolean) => Promise<null>;
    addNode: (peerId: string, address: string) => Promise<null>;
    removeNode: (peerId: string) => Promise<null>;
    pingPeers: () => Promise<null>;
    sendTransaction: (tx: CKBComponents.RawTransaction, outputsValidator?: CKBComponents.OutputsValidator) => Promise<CKBComponents.Hash>;
    txPoolInfo: () => Promise<CKBComponents.TxPoolInfo>;
    clearTxPool: () => Promise<null>;
    getRawTxPool(): Promise<CKBComponents.TxPoolIds>;
    getRawTxPool(verbose: true): Promise<CKBComponents.TxPoolVerbosity>;
    getRawTxPool(verbose: false | null): Promise<CKBComponents.TxPoolIds>;
    getBlockchainInfo: () => Promise<CKBComponents.BlockchainInfo>;
}
export declare class Base {
    #private;
    get rpcProperties(): RpcPropertes;
}
export default Base;
